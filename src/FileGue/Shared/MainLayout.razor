@inherits LayoutComponentBase
@using Blazored.Toast.Configuration
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavMgr
@inject IJSRuntime jsRuntime
@inject UserProfileService Userservice
@inject DriveService DriveSvc
@inject IJSRuntime IJS
@inject AppState AppState
<PageTitle>FileGue App</PageTitle>

<!-- loader Start -->
<div id="loading">
    <div id="loading-center">
    </div>
</div>
<!-- loader END -->
<!-- Wrapper Start -->
<CascadingValue Value="this">
    <div class="wrapper">

        <SideBarPage></SideBarPage>
        <div class="iq-top-navbar">
            <div class="iq-navbar-custom">
                <nav class="navbar navbar-expand-lg navbar-light p-0">
                    <div class="iq-navbar-logo d-flex align-items-center justify-content-between">
                        <i class="ri-menu-line wrapper-menu"></i>
                        <a href="/" class="header-logo">
                            <img src="/assets/images/logo.png" class="img-fluid rounded-normal light-logo" alt="logo">
                            <img src="/assets/images/logo-white.png" class="img-fluid rounded-normal darkmode-logo d-none" alt="logo">
                        </a>
                    </div>
                    <div class="iq-search-bar device-search">

                        <form>
                            <div class="input-prepend input-append">
                                <div class="btn-group">
                                    <label class="dropdown-toggle searchbox" data-toggle="dropdown">
                                        <input class="dropdown-toggle search-query text search-input" type="text" @bind="Keyword" @onkeyup="KeyUp" placeholder="Type here to search..."><span class="search-replace"></span>
                                        <a class="search-link" href="/browse-all" @onclick:preventDefault @onclick="Search"><i class="ri-search-line"></i></a>
                                        <span class="caret"><!--icon--></span>
                                    </label>
                                    <ul class="dropdown-menu">
                                        <li><a href="#" @onclick='()=>SetExt(string.Empty)' ><div class="item"><i class="far fa-file bg-info"></i>All</div></a></li>
                                        <li><a href="#" @onclick='()=>SetExt(".pdf")' ><div class="item"><i class="far fa-file-pdf bg-info"></i>PDFs</div></a></li>
                                        <li><a href="#" @onclick='()=>SetExt(".docx")' ><div class="item"><i class="far fa-file-alt bg-primary"></i>Documents</div></a></li>
                                        <li><a href="#" @onclick='()=>SetExt(".xlsx")' ><div class="item"><i class="far fa-file-excel bg-success"></i>Spreadsheet</div></a></li>
                                        <li><a href="#" @onclick='()=>SetExt(".pptx")' ><div class="item"><i class="far fa-file-powerpoint bg-danger"></i>Presentation</div></a></li>
                                        <li><a href="#" @onclick='()=>SetExt(".jpg,.png,.bmp,.gif,.jpeg")' ><div class="item"><i class="far fa-file-image bg-warning"></i>Photos & Images</div></a></li>
                                        <li><a href="#" @onclick='()=>SetExt(".mp4,.avi,.wmv")' ><div class="item"><i class="far fa-file-video bg-info"></i>Videos</div></a></li>
                                    </ul>
                                </div>
                            </div>
                        </form>
                    </div>

                    <div class="d-flex align-items-center">
                        <div class="change-mode">
                            <div class="custom-control custom-switch custom-switch-icon custom-control-inline">
                                <div class="custom-switch-inner">
                                    <p class="mb-0"> </p>
                                    <input type="checkbox" class="custom-control-input" id="dark-mode" data-active="true">
                                    <label class="custom-control-label" for="dark-mode" data-mode="toggle">
                                        <span class="switch-icon-left"><i class="a-left"></i></span>
                                        <span class="switch-icon-right"><i class="a-right"></i></span>
                                    </label>
                                </div>
                            </div>
                        </div>
                        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-label="Toggle navigation">
                            <i class="ri-menu-3-line"></i>
                        </button>
                        <div class="collapse navbar-collapse" id="navbarSupportedContent">
                            <ul class="navbar-nav ml-auto navbar-list align-items-center">
                                <li class="nav-item nav-icon search-content">
                                    <a href="#" class="search-toggle rounded" id="dropdownSearch" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        <i class="ri-search-line"></i>
                                    </a>
                                    <div class="iq-search-bar iq-sub-dropdown dropdown-menu" aria-labelledby="dropdownSearch">
                                        <form action="#" class="searchbox p-2">
                                            <div class="form-group mb-0 position-relative">
                                                <input type="text" class="text search-input font-size-12" @bind="Keyword" @onkeyup="KeyUp" placeholder="type here to search...">
                                                <a href="#" class="search-link" @onclick:preventDefault @onclick="Search"><i class="las la-search"></i></a>
                                            </div>
                                        </form>
                                    </div>
                                </li>
                                <li class="nav-item nav-icon dropdown">
                                    <a href="#" class="search-toggle dropdown-toggle" id="dropdownMenuButton01" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        <i class="ri-question-line"></i>
                                    </a>
                                    <div class="iq-sub-dropdown dropdown-menu" aria-labelledby="dropdownMenuButton01">
                                        <div class="card shadow-none m-0">
                                            <div class="card-body p-0 ">
                                                <div class="p-3">
                                                    <a href="#" class="iq-sub-card pt-0"><i class="ri-questionnaire-line"></i>Help</a>
                                                    <a href="#" class="iq-sub-card"><i class="ri-recycle-line"></i>Training</a>
                                                    <a href="#" class="iq-sub-card"><i class="ri-refresh-line"></i>Updates</a>
                                                    <a href="/privacy-policy" class="iq-sub-card"><i class="ri-service-line"></i>Terms and Policy</a>
                                                    <a href="#" class="iq-sub-card"><i class="ri-feedback-line"></i>Send Feedback</a>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </li>
                                <li class="nav-item nav-icon dropdown">
                                    <a href="#" class="search-toggle dropdown-toggle" id="dropdownMenuButton02" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        <i class="ri-settings-3-line"></i>
                                    </a>
                                    <div class="iq-sub-dropdown dropdown-menu" aria-labelledby="dropdownMenuButton02">
                                        <div class="card shadow-none m-0">
                                            <div class="card-body p-0 ">
                                                <div class="p-3">
                                                    <a href="#" class="iq-sub-card pt-0"><i class="ri-settings-3-line"></i> Settings</a>
                                                    <a href="#" class="iq-sub-card"><i class="ri-hard-drive-line"></i> Get Drive for desktop</a>
                                                    <a href="#" class="iq-sub-card"><i class="ri-keyboard-line"></i> Keyboard Shortcuts</a>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </li>
                                <li class="nav-item nav-icon dropdown caption-content">
                                    <a href="#" class="search-toggle dropdown-toggle" id="dropdownMenuButton03" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        <div class="caption bg-primary line-height">P</div>
                                    </a>
                                    <div class="iq-sub-dropdown dropdown-menu" aria-labelledby="dropdownMenuButton03">
                                        <div class="card mb-0">
                                            <div class="card-header d-flex justify-content-between align-items-center mb-0">
                                                <div class="header-title">
                                                    <h4 class="card-title mb-0">Profile</h4>
                                                </div>
                                                <div class="close-data text-right badge badge-primary cursor-pointer "><i class="ri-close-fill"></i></div>
                                            </div>
                                            <div class="card-body">
                                                <div class="profile-header">
                                                    <div class="cover-container text-center">
                                                        <div class="rounded-circle profile-icon bg-primary mx-auto d-block">

                                                            @SelUser?.FullName.Substring(0,1)

                                                            <a href="">

                                                            </a>
                                                        </div>
                                                        <div class="profile-detail mt-3">
                                                            <h5><a href="/edit-profile">@SelUser?.FullName</a></h5>
                                                            <p>@SelUser?.Email</p>
                                                        </div>
                                                        <a href="/logout" class="btn btn-primary">Sign Out</a>
                                                    </div>
                                                    <div class="profile-details mt-4 pt-4 border-top">
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </li>
                            </ul>
                        </div>
                    </div>
                </nav>
            </div>
        </div>
        <div class="content-page">
            <div class="container-fluid">

                @Body

            </div>
        </div>
    </div>
    <!-- Wrapper End-->
    <footer class="iq-footer">
        <div class="container-fluid">
            <div class="row">
                <div class="col-lg-6">
                    <ul class="list-inline mb-0">
                        <li class="list-inline-item"><a href="../backend/privacy-policy.html">Privacy Policy</a></li>
                        <li class="list-inline-item"><a href="../backend/terms-of-service.html">Terms of Use</a></li>
                    </ul>
                </div>
                <div class="col-lg-6 text-right">
                    Copyright 2020 <a href="#">CloudBOX</a> All Rights Reserved.
                </div>
            </div>
        </div>
    </footer>
    <AddNewFolder @ref="AddNewFolderPopup"></AddNewFolder>
    <UploadFileModal @ref="UploadFilePopup"></UploadFileModal>
    <ExampleModalPage></ExampleModalPage>
    <ConfirmDialog OnClick="@Delete" />
</CascadingValue>

<BlazoredToasts Position="ToastPosition.BottomRight"
                Timeout="10"
                SuccessClass="success-toast-override"
                SuccessIconClass="fa fa-thumbs-up"
                ErrorIconClass="fa fa-bug" />
<PageCounter></PageCounter>
<AuthControl></AuthControl>
@code {
    public string Keyword{ set; get; }
    public string Ext{ set; get; }
    AddNewFolder AddNewFolderPopup;
    UploadFileModal UploadFilePopup;

    public DriveFile DeleteFileItem { get; set; }

    public DriveFolder DeleteFolderItem { get; set; }
    [Parameter]
    public bool IsTransparent { get; set; } = true;
    string SelectDelete;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    async Task Keluar()
    {
        NavMgr.NavigateTo($"/logout", true);
        //await localStorage.SetItemAsync(AppConstants.NameKey, "");
        //NavMgr.NavigateTo($"/login");
    }


    UserProfile SelUser;
    protected override async Task OnInitializedAsync()
    {


        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            var UserName = user.Identity.Name;
            SelUser = Userservice.GetUserByEmail(UserName);

        }
    }
    private async Task Delete()
    {
        switch (SelectDelete)
        {
            case "File":
                if (DeleteFileItem != null)
                    await DeleteFile();

                break;
            case "RemoveFile":
                if (DeleteFileItem != null)
                    await RemoveFile();

                break;
            case "Folder":
                if (DeleteFolderItem != null)
                    await DeleteFolder();

                break;

            default:
                break;
        }
    }

    private async Task DeleteFile()
    {
        DriveSvc.InitDrive(SelUser.Username);
        var item = DriveSvc.GetFileByUid(DeleteFileItem.UID);
        if(item!=null)
        {
            item.IsDeleted = true;
            DriveSvc.Save();
        }
        await IJS.InvokeAsync<object>("CloseModal", "confirmDeleteModal");
        AppState.RefreshFolder(DeleteFileItem.ParentFolderUid);
        DeleteFileItem = null;

    }

    //permanent delete
    private async Task RemoveFile()
    {
        DriveSvc.InitDrive(SelUser.Username);
        var folder = DriveSvc.GetFolderByUid(DeleteFileItem.ParentFolderUid);
        var res = DriveSvc.DeleteFile(folder, DeleteFileItem.UID);
        if (res)
        {
            await IJS.InvokeAsync<object>("CloseModal", "confirmDeleteModal");
            AppState.RefreshFolder(DeleteFileItem.ParentFolderUid);
            DeleteFileItem = null;
        }

    }

    private async Task DeleteFolder()
    {
        DriveSvc.InitDrive(SelUser.Username);
        var item = DriveSvc.GetFolderByUid(DeleteFolderItem.UID);
        if (item != null)
        {
            item.IsDeleted = true;
            DriveSvc.Save();
        }
        await IJS.InvokeAsync<object>("CloseModal", "confirmDeleteModal");
        AppState.RefreshDrive(SelUser.Username);
        DeleteFolderItem = null;
    }
    public void PrepareDeleteFile(DriveFile item)
    {
        SelectDelete = "File";
        DeleteFileItem = item;
        StateHasChanged();
    }
    public void PrepareRemoveFile(DriveFile item)
    {
        SelectDelete = "RemoveFile";
        DeleteFileItem = item;
        StateHasChanged();
    }
    public void PrepareDeleteFolder(DriveFolder item)
    {
        SelectDelete = "Folder";
        DeleteFolderItem = item;
        StateHasChanged();
    }
    public void ResetAddNewFolder()
    {
        AddNewFolderPopup?.Reset();
    }
    public void ResetUploadFile()
    {
        UploadFilePopup?.Reset();
    }
    public void EditFolder(DriveFolder folder)
    {
        AddNewFolderPopup?.SetFolder(folder);
    }
    protected override void OnAfterRender(bool firstRender)
    {

        if (firstRender)
        {
            IJS.InvokeVoidAsync("InitJs");
        }
    }
    async Task SetExt(string ext)
    {
        Ext = ext;
        Search();
    }

    private void KeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            Search();
        }
    }

    void Search()
    {
        NavMgr.NavigateTo($"/browse-all/?q={Keyword}&e={Uri.EscapeDataString(Ext)}");
    }
}