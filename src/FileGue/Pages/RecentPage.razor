 @page "/recents"
@inject IJSRuntime IJS
@inject IToastService toastService
@inject AzureBlobHelper AzureBlobHelper
@inject UserProfileService UserSvc
@inject DriveService DriveSvc
@inject NavigationManager NavMgr
@inject AppState AppState
@inject FileStatService FileStatSvc
@implements IDisposable
 <div class="row">
    @if (GroupedFiles != null)
        foreach (var grpFile in GroupedFiles)
        {
            <div class="col-lg-12">
                <div class="card card-block card-stretch card-transparent ">
                    <div class="card-header d-flex justify-content-between pb-0">
                        <div class="header-title">
                            <h4 class="card-title">@grpFile.GroupName</h4>
                        </div>
                        <div class="card-header-toolbar d-flex align-items-center">
                            <div class="card-header-toolbar">
                                <div class="dropdown">
                                    <span class="dropdown-toggle dropdown-bg btn bg-white" id="dropdownMenuButton1"
                                  data-toggle="dropdown">
                                        Name<i class="ri-arrow-down-s-line ml-1"></i>
                                    </span>
                                    <div class="dropdown-menu dropdown-menu-right shadow-none"
                                 aria-labelledby="dropdownMenuButton1">
                                        <a class="dropdown-item" href="#">Last modified</a>
                                        <a class="dropdown-item" href="#">Last modifiedby me</a>
                                        <a class="dropdown-item" href="#">Last opened by me</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
           
            @foreach (var file in grpFile.Files)
            {
                <div class="col-lg-3 col-md-6 col-sm-6">
                    <div class="card card-block card-stretch card-height">
                        <div class="card-body image-thumb ">
                            <div class="mb-4 text-center p-3 rounded iq-thumb">
                                @if (file.FileType == FileTypes.Image)
                                {
                                    <a class="image-popup-vertical-fit" @onclick="()=>HitDownload(file)" desc="@file.Owner" title="@file.Name" href="@(string.IsNullOrEmpty(file.FileUrl)?"/assets/images/layouts/page-1/01.png":file.FileUrl)">
                                        <img src="@(string.IsNullOrEmpty(file.FileUrl)?"/assets/images/layouts/page-1/01.png":file.FileUrl)" class="img-fluid" alt="images" />
                                        <div class="iq-image-overlay"></div>
                                    </a>
                                }
                                else if (file.FileType == FileTypes.Pdf)
                                {
                                    <div class="iq-image-overlay"></div>
                                    <a href="#" data-load-file="file" @onclick="()=>HitDownload(file)" data-load-target="#resolte-contaniner" data-url="@file.FileUrl" data-toggle="modal" data-target="#exampleModal" data-title="@file.Name"><img src="/assets/images/layouts/page-1/pdf.png" class="img-fluid" alt="image1"></a>
                                }
                                else if (file.FileType == FileTypes.Word)
                                {
                                    <div class="iq-image-overlay"></div>
                                    <a href="#" data-title="@file.Name" @onclick="()=>HitDownload(file)" data-load-file="file" data-load-target="#resolte-contaniner" data-url="@file.FileUrl" data-toggle="modal" data-target="#exampleModal"><img src="/assets/images/layouts/page-1/doc.png" class="img-fluid" alt="image1"></a>
                                }
                                else if (file.FileType == FileTypes.Excel)
                                {
                                    <div class="iq-image-overlay"></div>
                                    <a href="#" data-title="@file.Name" @onclick="()=>HitDownload(file)" data-load-file="file" data-load-target="#resolte-contaniner" data-url="@file.FileUrl" data-toggle="modal" data-target="#exampleModal"><img src="/assets/images/layouts/page-1/xlsx.png" class="img-fluid" alt="image1"></a>
                                }
                                else if (file.FileType == FileTypes.PowerPoint)
                                {
                                    <div class="iq-image-overlay"></div>
                                    <a href="#" data-title="@file.Name" @onclick="()=>HitDownload(file)" data-load-file="file" data-load-target="#resolte-contaniner" data-url="@file.FileUrl" data-toggle="modal" data-target="#exampleModal"><img src="/assets/images/layouts/page-1/ppt.png" class="img-fluid" alt="image1"></a>
                                }
                                else
                                {
                                    <div class="iq-image-overlay"></div>
                                    <a href="@file.FileUrl" data-title="@file.Name" @onclick="()=>HitDownload(file)" target="_blank"><img src="/assets/images/layouts/page-1/xml.png" class="img-fluid" alt="image1"></a>
                                }

                            </div>
                            <h6>@file.Name</h6>
                        </div>
                    </div>
                </div>
            }
        }
                
                <div class="col-lg-12">
                    <div class="card card-block card-stretch card-transparent">
                        <div class="card-header d-flex justify-content-between pb-0">
                            <div class="header-title">
                                <h4 class="card-title">Folders</h4>
                            </div>
                            <div class="card-header-toolbar">
                                <div class="dropdown">
                                    <span class="dropdown-toggle dropdown-bg btn bg-white" id="dropdownMenuButton1"
                                        data-toggle="dropdown">
                                        Name<i class="ri-arrow-down-s-line ml-1"></i>
                                    </span>
                                    <div class="dropdown-menu dropdown-menu-right shadow-none"
                                        aria-labelledby="dropdownMenuButton1">
                                        <a class="dropdown-item" href="#">Last modified</a>
                                        <a class="dropdown-item" href="#">Last modifiedby me</a>
                                        <a class="dropdown-item" href="#">Last opened by me</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>            
    @if (Folders != null)
        @foreach (var folder in Folders)
        {
            <div class="col-md-6 col-sm-6 col-lg-3">
                <div class="card card-block card-stretch card-height">
                    <div class="card-body">
                        <div class="d-flex justify-content-between">
                            <a href="./page-alexa.html" class="folder">
                                <div class="icon-small bg-danger rounded mb-4">
                                    <i class="ri-file-copy-line"></i>
                                </div>
                            </a>
                            <div class="card-header-toolbar">
                                <div class="dropdown">
                                    <span class="dropdown-toggle" id="dropdownMenuButton2" data-toggle="dropdown">
                                        <i class="ri-more-2-fill"></i>
                                    </span>
                                    <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuButton2">
                                        <a class="dropdown-item" href="@($"/browse-folder/{folder.UID}")"><i class="ri-eye-fill mr-2"></i>View</a>
                                        <a class="dropdown-item" href="#" @onclick="(() => DeleteFolder(folder))" data-toggle="modal" data-target="#confirmDeleteModal"><i class="ri-delete-bin-6-fill mr-2"></i>Delete</a>
                                        <a class="dropdown-item" href="/recents" @onclick="()=>EditFolder(folder)" ><i class="ri-pencil-fill mr-2"></i>Edit</a>
                                        <a class="dropdown-item" href="#" @onclick="()=>Download(folder)" @onclick:preventDefault><i class="ri-file-download-fill mr-2"></i>Download</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <a href="@($"/browse-folder/{folder.UID}")" class="folder">
                            <h5 class="mb-2">@folder.Name</h5>
                            <p class="mb-2"><i class="lar la-clock text-danger mr-2 font-size-20"></i> @folder.CreatedDate.ToString("dd MMM, yyyy")</p>
                            <p class="mb-0"><i class="las la-file-alt text-danger mr-2 font-size-20"></i> @folder.Files.Count Files</p>
                        </a>

                    </div>
                </div>
            </div>
        }
    <div class="col-lg-12">
                    <div class="card card-block card-stretch card-transparent">
                        <div class="card-header d-flex justify-content-between pb-0">
                            <div class="header-title">
                                <h4 class="card-title">Files</h4>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-12">
                    <div class="card card-block card-stretch card-height">
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table mb-0 table-borderless tbl-server-info">
                                <thead>
                                    <tr>
                                        <th scope="col">Name</th>
                                        <th scope="col">Owner</th>
                                        <th scope="col">Last Edit</th>
                                        <th scope="col">File Size</th>
                                        <th scope="col"></th>
                                    </tr>
                                </thead>
                                <tbody>
                            @if (Files != null)
                                @foreach (var file in Files)
                                {
                                    <tr @key="file.UID">
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div class="mr-3">
                                                    @if (file.FileType == FileTypes.Image)
                                                    {
                                                        <a href="#"><img src="@(string.IsNullOrEmpty(file.FileUrl)?"/assets/images/layouts/page-1/01.png":file.FileUrl)" class="img-fluid avatar-30" alt="image1"></a>

                                                    }
                                                    else if (file.FileType == FileTypes.Pdf)
                                                    {
                                                        <a href="#"><img src="/assets/images/layouts/page-1/pdf.png" class="img-fluid avatar-30" alt="image1"></a>
                                                    }
                                                    else if (file.FileType == FileTypes.Word)
                                                    {
                                                        <a href="#"><img src="/assets/images/layouts/page-1/doc.png" class="img-fluid avatar-30" alt="image1"></a>

                                                    }
                                                    else if (file.FileType == FileTypes.Excel)
                                                    {
                                                        <a href="#"><img src="/assets/images/layouts/page-1/xlsx.png" class="img-fluid avatar-30" alt="image1"></a>

                                                    }
                                                    else if (file.FileType == FileTypes.PowerPoint)
                                                    {
                                                        <a href="#"><img src="/assets/images/layouts/page-1/ppt.png" class="img-fluid avatar-30" alt="image1"></a>

                                                    }
                                                    else
                                                    {
                                                        <a href="#"><img src="/assets/images/layouts/page-1/xml.png" class="img-fluid avatar-30" alt="image1"></a>

                                                    }

                                                </div>
                                                @file.Name
                                            </div>
                                        </td>
                                        <td>@file.Owner</td>
                                        <td>@(file.UpdatedDate.ToString("MMM dd, yyyy"))</td>
                                        <td>@(DriveHelper.GetSize(file.Size))</td>
                                        <td>
                                            <div class="dropdown">
                                                <span class="dropdown-toggle" id="dropdownMenuButton6" data-toggle="dropdown">
                                                    <i class="ri-more-fill"></i>
                                                </span>
                                                <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuButton6">
                                                    <a class="dropdown-item" @onclick="()=>HitDownload(file)" href="@file.FileUrl" target="_blank"><i class="ri-eye-fill mr-2"></i>View</a>
                                                    <a class="dropdown-item" @onclick="(() => DeleteFile(file))" data-toggle="modal" data-target="#confirmDeleteModal" href="#"><i class="ri-delete-bin-6-fill mr-2"></i>Delete</a>
                                                    <a class="dropdown-item" href="#" @onclick="()=>SetFavorite(file,true)" @onclick:preventDefault><i class="ri-pencil-fill mr-2"></i>Favorite</a>
                                                    <a class="dropdown-item" href="#" @onclick="()=>SetFavorite(file,false)" @onclick:preventDefault><i class="ri-eraser-line mr-2"></i>Not Favorite</a>
                                                    <a class="dropdown-item" @onclick="()=>HitDownload(file)" href="@file.FileUrl" target="_blank"><i class="ri-file-download-fill mr-2"></i>Download</a>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>

                                }
                                </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
@code {
    [CascadingParameter]
    public MainLayout Layout { get; set; }
    public List<GroupedFile> GroupedFiles { get; set; }
    public List<DriveFile> Files { get; set; }
    public List<DriveFolder> Folders { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string UserName;

    Drive MyDrive { set; get; }
    protected override async Task OnInitializedAsync()
    {

        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;
            DriveSvc.InitDrive(UserName);
            MyDrive = DriveSvc.MyDrive;
        }
        LoadData();
        AppState.OnFolderChange += Refresh;
    }
    async Task SetFavorite(DriveFile item, bool State)
    {
        item.Favorite = State;
        DriveSvc.Save();
        toastService.ShowSuccess($"set to {(State ? "favorite" : "not favorite")}");
    }
    public override async Task SetParametersAsync(ParameterView parameters)
    {

        await base.SetParametersAsync(parameters);

        LoadData();
    }
    async void Refresh(string folderuid)
    {
        //if (FolderUid == folderuid)
        {
            LoadData();
            await InvokeAsync(StateHasChanged);
        }
    }
    public void Dispose()
    {
        AppState.OnFolderChange -= Refresh;
    }
    void LoadData()
    {
        DriveSvc.Refresh();
        MyDrive = DriveSvc.MyDrive;
        Files = DriveSvc.GetRecentFiles(12);
        Folders = DriveSvc.GetRecentFolders();
        GroupedFiles = (from p in Files
                        group p by p.FileType into g
                        select new GroupedFile()
                            {
                                GroupName = g.Key,
                                Files = g.ToList()
                            }).ToList();

    }
    async Task EditFolder(DriveFolder item)
    {
        await IJS.InvokeVoidAsync("ShowModal", "newFolderModal");
        Layout.EditFolder(item);
    }
    protected override void OnAfterRender(bool firstRender)
    {

        if (firstRender)
        {
            IJS.InvokeVoidAsync("ApplyListGrid");
        }
    }
    void NotAvailable()
    {
        toastService.ShowWarning("This feature is not available yet.");
    }
    async Task DeleteFile(DriveFile item)
    {
        Layout.PrepareDeleteFile(item);
    }
    async Task DeleteFolder(DriveFolder item)
    {
        Layout.PrepareDeleteFolder(item);
    }

    async Task Download(DriveFolder folder)
    {
        if (folder.Files.Count <= 0)
        {
            toastService.ShowError("No files inside the folder");
            return;
        }

        try
        {
            toastService.ShowInfo("start zipping files..");
            var url = NavMgr.BaseUri;
            var xx = url.Substring(url.Length-1,1);
            url = xx == "/" ?  url.Remove(url.Length - 1, 1) : url;
            var bytes = await ZipHelper.CreateZipFromLinks(folder.Files,url);
            await FileUtil.SaveAs(IJS, "Compressed.zip", bytes);
            toastService.ShowSuccess("compressing has been completed, now downloading file..");
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }
    async Task HitDownload(DriveFile file)
    {
        var log = FileStatSvc.InsertData(new FileStat() { CreatedDate = DateHelper.GetLocalTimeNow(), Name = file.Name, Size = file.Size, StatType = StatTypes.Download, UID = file.UID, Username = UserName });
    }
}
