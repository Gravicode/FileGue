@page "/sign-in"
@page "/loginControl"

@using System.Web;
@using Microsoft.AspNetCore.WebUtilities
@inject IJSRuntime jsRuntime
@inject IToastService toastService
@inject UserProfileService UserSvc
@inject NavigationManager NavMgr
@layout NoAuthLayout

<AuthorizeView>
    <Authorized>
        <div class="row justify-content-center align-items-center height-self-center">
            <div class="col-md-5 col-sm-12 col-12 align-self-center">
                <div class="sign-user_card">
                    <img src="../assets/images/logo.png" class="img-fluid rounded-normal light-logo logo" alt="logo">
                    <img src="../assets/images/logo-white.png" class="img-fluid rounded-normal darkmode-logo logo" alt="logo">
                    <h3 class="mb-3">Log Out</h3>
                    
                    <div class="welcome-text">
                        <h3>Anda sudah login!</h3>
                        <span>Mau log out? <a href="/logout">Sign Out!</a></span>
                    </div>
                </div>
            </div>
        </div>
        
    </Authorized>
    <NotAuthorized>
        <div class="row justify-content-center align-items-center height-self-center">
            <div class="col-md-5 col-sm-12 col-12 align-self-center">
                <div class="sign-user_card">
                    <img src="../assets/images/logo.png" class="img-fluid rounded-normal light-logo logo" alt="logo">
                    <img src="../assets/images/logo-white.png" class="img-fluid rounded-normal darkmode-logo logo" alt="logo">
                    <h3 class="mb-3">Sign In</h3>
                    <p>Login to stay connected.</p>
                    <form>
                        <div class="row">
                            <div class="col-lg-12">
                                <div class="floating-label form-group">
                                    <input class="floating-input form-control" @bind="@Username" type="email" placeholder=" ">
                                    <label>Email</label>
                                </div>
                            </div>
                            <div class="col-lg-12">
                                <div class="floating-label form-group">
                                    <input class="floating-input form-control" @bind="@Password" @onkeyup="KeyUp" type="password" placeholder=" ">
                                    <label>Password</label>
                                </div>
                            </div>
                            <div class="col-lg-6">
                                <div class="custom-control custom-checkbox mb-3 text-left">
                                    <input type="checkbox" class="custom-control-input" id="customCheck1">
                                    <label class="custom-control-label" for="customCheck1">Remember Me</label>
                                </div>
                            </div>
                            <div class="col-lg-6">
                                <a href="#" @onclick="GotoForgotPassword"  @onclick:preventDefault class="text-primary float-right">Forgot Password?</a>
                            </div>
                        </div>
                        <button type="button" @onclick="LoginNow" @onkeyup="@KeyUp" class="btn btn-primary">Sign In</button>
                        <p class="mt-3">
                            Create an Account <a href="/register" class="text-primary">Sign Up</a>
                        </p>
                    </form>
                </div>
            </div>
        </div>
      

    </NotAuthorized>
</AuthorizeView>


@code {
    bool showError = false;
    string Username = "";
    string Password = "";
    async Task KeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await LoginNow();
            //Console.WriteLine(this.Value);
        }
    }

    async Task GotoForgotPassword()
    {
        NavMgr.NavigateTo("/forgot-password");
    }
    private string encode(string param)
    {
        return HttpUtility.UrlEncode(param);
    }
    async Task LoginNow()
    {
        var ErrMsg = "";
        if (string.IsNullOrEmpty(Username))
        {
            ErrMsg += "Tolong isi username.";
        }
        if (string.IsNullOrEmpty(Password))
        {
            ErrMsg += "Tolong isi password.";
        }
        if (ErrMsg.Length > 0)
        {
            toastService.ShowError(ErrMsg, "Perhatian");
        }

        var res = UserSvc.Login(Username, Password);
        if(res)
        {
            string logUrl = $"/login?paramUsername={encode(Username)}&paramPassword={encode(Password)}";
            await jsRuntime.InvokeAsync<object>("OpenUrl", logUrl);
        }
        else
        {
            toastService.ShowError("username / password salah atau tidak ditemukan", "Perhatian");
        }
        //NavMgr.NavigateTo(logUrl);
    }
    protected override async Task OnInitializedAsync()
    {
        var uri = NavMgr.ToAbsoluteUri(NavMgr.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("result", out var resultString))
        {
            if (!string.IsNullOrEmpty(resultString))
            {
                var result = bool.Parse(resultString);
                if (!result)
                {
                    showError = true;
                    toastService.ShowWarning("username/password salah atau tidak terdaftar", "Perhatian");
                }
            }
        }
    }
}